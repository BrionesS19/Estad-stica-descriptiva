names_to = "Tipo",
values_to = "Probabilidad") %>%
mutate(Tipo = case_when(
Tipo == "Prob_Teorica" ~ "Teórica",
Tipo == "Freq_Observada" ~ "Observada"
))
ggplot(comp_long, aes(x = Valor, y = Probabilidad, fill = Tipo)) +
geom_col(position = "dodge", alpha = 0.7) +
scale_x_continuous(breaks = 0:4) +
scale_fill_manual(values = c("Teórica" = "blue", "Observada" = "red")) +
labs(title = paste("Simulación con", n_sim, "observaciones"),
x = "Valor",
y = "Probabilidad",
fill = "Distribución") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom")
#| code-fold: true
#| label: grafico-simulacion ejercicio propuesto
#| fig-width: 8
#| fig-height: 6
#| fig-align: "center"
#| fig-cap: "Comparación entre distribución teórica y simulada"
# Preparar datos para el gráfico
comp_long <- comparacion |>
pivot_longer(cols = c(Prob_Teorica, Freq_Observada),
names_to = "Tipo",
values_to = "Probabilidad") %>%
mutate(Tipo = case_when(
Tipo == "Prob_Teorica" ~ "Teórica",
Tipo == "Freq_Observada" ~ "Observada"
))
ggplot(comp_long, aes(x = Valor, y = Probabilidad, fill = Tipo)) +
geom_col(position = "dodge", alpha = 0.7) +
scale_x_continuous(breaks = 0:4) +
scale_fill_manual(values = c("Teórica" = "#b3dfd6", "Observada" = "#3a95b1")) +
labs(title = paste("Simulación con", n_sim, "observaciones"),
x = "Valor",
y = "Probabilidad",
fill = "Distribución") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom")
#| code-fold: true
#| label: limite-central
#| fig-width: 8
#| fig-height: 6
#| fig-align: "center"
#| fig-cap: "Demostración del Teorema del Límite Central"
# Simular medias muestrales
set.seed(456)
n_muestras <- 1000
tamaño_muestra <- 30
medias_muestrales <- replicate(n_muestras, {
muestra <- runif_disc(tamaño_muestra, 1, 6)
mean(muestra)
})
# Crear histograma
hist_data <- data.frame(Medias = medias_muestrales)
ggplot(hist_data) +
geom_histogram(aes(x=Medias, after_stat(density)), bins = 30,
fill = "lightblue", alpha = 0.7, color = "black") +
geom_density(aes(x = Medias), color = "red", linewidth = 1) +
geom_vline(xintercept = mean(medias_muestrales),
color = "blue", linetype = "dashed", size = 1) +
labs(title = "Distribución de Medias Muestrales",
subtitle = paste(n_muestra, "muestras de Uniforme(1,6)"),
x = "Media Muestral",
y = "Densidad") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#| code-fold: true
#| label: limite-central
#| fig-width: 8
#| fig-height: 6
#| fig-align: "center"
#| fig-cap: "Demostración del Teorema del Límite Central"
# Simular medias muestrales
set.seed(456)
n_muestras <- 1000
tamaño_muestra <- 30
medias_muestrales <- replicate(n_muestras, {
muestra <- runif_disc(tamaño_muestra, 1, 6)
mean(muestra)
})
# Crear histograma
hist_data <- data.frame(Medias = medias_muestrales)
ggplot(hist_data) +
geom_histogram(aes(x=Medias, after_stat(density)), bins = 30,
fill = "lightblue", alpha = 0.7, color = "black") +
geom_density(aes(x = Medias), color = "red", linewidth = 1) +
geom_vline(xintercept = mean(medias_muestrales),
color = "blue", linetype = "dashed", size = 1) +
labs(title = "Distribución de Medias Muestrales",
subtitle = paste(n_muestra, "muestras de Uniforme(1,6), cada una de tamaño", tamaño_muestra),
x = "Media Muestral",
y = "Densidad") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#| code-fold: true
#| label: limite-central
#| fig-width: 8
#| fig-height: 6
#| fig-align: "center"
#| fig-cap: "Demostración del Teorema del Límite Central"
# Simular medias muestrales
set.seed(456)
n_muestras <- 1000
tamaño_muestra <- 30
medias_muestrales <- replicate(n_muestras, {
muestra <- runif_disc(tamaño_muestra, 1, 6)
mean(muestra)
})
# Crear histograma
hist_data <- data.frame(Medias = medias_muestrales)
ggplot(hist_data) +
geom_histogram(aes(x=Medias, after_stat(density)), bins = 30,
fill = "lightblue", alpha = 0.7, color = "black") +
geom_density(aes(x = Medias), color = "red", linewidth = 1) +
geom_vline(xintercept = mean(medias_muestrales),
color = "blue", linetype = "dashed", size = 1) +
labs(title = "Distribución de Medias Muestrales",
subtitle = paste(n_muestras, "muestras de Uniforme(1,6), cada una de tamaño", tamaño_muestra),
x = "Media Muestral",
y = "Densidad") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# Estadísticas
cat("Media teórica:", (1+6)/2, "\n")
cat("Media observada:", round(mean(medias_muestrales), 4), "\n")
cat("Varianza teórica de la media:", round(((6-1+1)^2-1)/12/tamaño_muestra, 4), "\n")
cat("Varianza observada de la media:", round(var(medias_muestrales), 4), "\n")
#| label: setup
#| include: false
library(tidyverse)
library(kableExtra)
library(gridExtra)
#| label: moneda-bernoulli
# Moneda justa
p_moneda <- 0.5
# Crear tabla de probabilidades
bernoulli_moneda <- data.frame(
Resultado = c("Sello (0)", "Cara (1)"),
Valor = c(0, 1),
Probabilidad = c(1-p_moneda, p_moneda)
)
kable(bernoulli_moneda,
caption = "Distribución Bernoulli - Moneda justa (p = 0.5)",
align = "ccc") %>%
kable_styling(bootstrap_options = "striped")
# Parámetros
media_moneda <- p_moneda
varianza_moneda <- p_moneda * (1 - p_moneda)
desv_std_moneda <- sqrt(varianza_moneda)
cat("Parámetros estadísticos:\n")
cat("Media:", media_moneda, "\n")
cat("Varianza:", varianza_moneda, "\n")
cat("Desviación estándar:", desv_std_moneda, "\n")
#| label: ejemplos-bernoulli-multiple
# Diferentes valores de p
p_values <- c(0.1, 0.3, 0.5, 0.7, 0.9)
# Crear data frame para visualización
bernoulli_data <- data.frame()
for(p in p_values) {
temp_data <- data.frame(
p = paste("p =", p),
x = c(0, 1),
probabilidad = c(1-p, p),
media = p,
varianza = p*(1-p)
)
bernoulli_data <- rbind(bernoulli_data, temp_data)
}
# Tabla de parámetros
param_bernoulli <- data.frame(
p = p_values,
Media = p_values,
Varianza = p_values * (1 - p_values),
Desv_Std = sqrt(p_values * (1 - p_values))
)
kable(param_bernoulli,
caption = "Parámetros de la distribución Bernoulli para diferentes valores de p",
digits = 4,
col.names = c("p", "Media", "Varianza", "Desv. Estándar")) %>%
kable_styling(bootstrap_options = "striped")
#| label: grafico-bernoulli
#| fig-cap: "Distribución Bernoulli para diferentes valores de p"
ggplot(bernoulli_data, aes(x = factor(x), y = probabilidad, fill = factor(x))) +
geom_col(alpha = 0.7) +
geom_text(aes(label = round(probabilidad, 2)), vjust = -0.3) +
facet_wrap(~p, ncol = 5) +
scale_fill_manual(values = c("0" = "red", "1" = "blue")) +
labs(title = "Distribución de Bernoulli para diferentes valores de p",
x = "Valor (0 = Fracaso, 1 = Éxito)",
y = "Probabilidad",
fill = "Resultado") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom")
#| label: binomial-monedas
# Parámetros
n_monedas <- 10
p_monedas <- 0.5
# Calcular probabilidades
k_values <- 0:n_monedas
prob_binomial <- dbinom(k_values, n_monedas, p_monedas)
# Crear data frame
binomial_monedas <- data.frame(
Num_Caras = k_values,
Probabilidad = prob_binomial
)
# Mostrar tabla
kable(binomial_monedas,
caption = paste("Distribución Binomial - 10 lanzamientos de moneda (n =", n_monedas, ", p =", p_monedas, ")"),
digits = 4,
col.names = c("Número de Caras", "Probabilidad")) %>%
kable_styling(bootstrap_options = "striped")
# Parámetros estadísticos
media_monedas <- n_monedas * p_monedas
varianza_monedas <- n_monedas * p_monedas * (1 - p_monedas)
desv_std_monedas <- sqrt(varianza_monedas)
cat("\nParámetros estadísticos:\n")
cat("Media:", media_monedas, "\n")
cat("Varianza:", varianza_monedas, "\n")
cat("Desviación estándar:", round(desv_std_monedas, 4), "\n")
#| label: grafico-binomial-monedas
#| fig-cap: "Distribución Binomial - 10 lanzamientos de moneda"
ggplot(binomial_monedas, aes(x = Num_Caras, y = Probabilidad)) +
geom_col(fill = "steelblue", alpha = 0.7, width = 0.8) +
geom_text(aes(label = round(Probabilidad, 3)), vjust = -0.5, size = 3) +
geom_vline(xintercept = media_monedas, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = media_monedas + 2.5, y = max(prob_binomial) * 0.8,
label = paste("Media =", media_monedas), color = "red") +
scale_x_continuous(breaks = k_values) +
labs(title = paste("Distribución Binomial(", n_monedas, ",", p_monedas, ")"),
x = "Número de Éxitos",
y = "Probabilidad") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#| label: control-calidad
# Parámetros
n_articulos <- 20
p_defecto <- 0.05
# Probabilidades
k_defectos <- 0:n_articulos
prob_defectos <- dbinom(k_defectos, n_articulos, p_defecto)
# Crear data frame
calidad_data <- data.frame(
Defectos = k_defectos,
Probabilidad = prob_defectos
)
# Filtrar probabilidades significativas (> 0.001)
calidad_filtrada <- calidad_data[calidad_data$Probabilidad > 0.001, ]
kable(calidad_filtrada,
caption = paste("Distribución Binomial - Control de calidad (n =", n_articulos, ", p =", p_defecto, ")"),
digits = 4,
col.names = c("Número de Defectos", "Probabilidad")) %>%
kable_styling(bootstrap_options = "striped")
# Parámetros estadísticos
media_defectos <- n_articulos * p_defecto
varianza_defectos <- n_articulos * p_defecto * (1 - p_defecto)
desv_std_defectos <- sqrt(varianza_defectos)
cat("Parámetros estadísticos:\n")
cat("Media:", media_defectos, "\n")
cat("Varianza:", round(varianza_defectos, 4), "\n")
cat("Desviación estándar:", round(desv_std_defectos, 4), "\n")
# Probabilidades importantes
prob_0_defectos <- dbinom(0, n_articulos, p_defecto)
prob_max_2_defectos <- pbinom(2, n_articulos, p_defecto)
prob_mas_3_defectos <- 1 - pbinom(3, n_articulos, p_defecto)
cat("\nProbabilidades de interés:\n")
cat("P(0 defectos):", round(prob_0_defectos, 4), "\n")
cat("P(≤ 2 defectos):", round(prob_max_2_defectos, 4), "\n")
cat("P(> 3 defectos):", round(prob_mas_3_defectos, 4), "\n")
#| label: grafico-calidad
#| fig-cap: "Distribución Binomial - Control de calidad"
ggplot(calidad_data[1:8, ], aes(x = Defectos, y = Probabilidad)) +
geom_col(fill = "darkgreen", alpha = 0.7, width = 0.8) +
geom_text(aes(label = round(Probabilidad, 4)), vjust = -0.5, size = 3) +
geom_vline(xintercept = media_defectos, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = media_defectos + 1.2, y = max(prob_defectos) * 0.6,
label = paste("Media =", media_defectos), color = "red") +
scale_x_continuous(breaks = 0:7) +
labs(title = paste("Distribución Binomial(", n_articulos, ",", p_defecto, ")"),
subtitle = "Control de calidad - Artículos defectuosos",
x = "Número de Artículos Defectuosos",
y = "Probabilidad") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#| label: efecto-n
# Diferentes valores de n con p fijo
n_vals <- c(5, 10, 20, 50)
p_fijo <- 0.3
# Crear data frame para comparación
comp_n_data <- data.frame()
for(n in n_vals) {
k_vals <- 0:n
probs <- dbinom(k_vals, n, p_fijo)
temp_data <- data.frame(
n = paste("n =", n),
k = k_vals,
probabilidad = probs,
media = n * p_fijo,
varianza = n * p_fijo * (1 - p_fijo)
)
comp_n_data <- rbind(comp_n_data, temp_data)
}
# Filtrar para visualización (solo valores con probabilidad > 0.01)
comp_n_filtered <- comp_n_data[comp_n_data$probabilidad > 0.01, ]
ggplot(comp_n_filtered, aes(x = k, y = probabilidad)) +
geom_col(fill = "purple", alpha = 0.7, width = 0.8) +
facet_wrap(~n, scales = "free") +
labs(title = paste("Efecto del parámetro n (p =", p_fijo, ")"),
x = "Número de Éxitos",
y = "Probabilidad") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#| label: efecto-p
#| fig-cap: "Efecto del parámetro p en la distribución binomial"
# Diferentes valores de p con n fijo
p_vals <- c(0.1, 0.3, 0.5, 0.7, 0.9)
n_fijo <- 10
# Crear data frame para comparación
comp_p_data <- data.frame()
for(p in p_vals) {
k_vals <- 0:n_fijo
probs <- dbinom(k_vals, n_fijo, p)
temp_data <- data.frame(
p = paste("p =", p),
k = k_vals,
probabilidad = probs,
media = n_fijo * p,
varianza = n_fijo * p * (1 - p)
)
comp_p_data <- rbind(comp_p_data, temp_data)
}
ggplot(comp_p_data, aes(x = k, y = probabilidad)) +
geom_col(fill = "orange", alpha = 0.7, width = 0.8) +
geom_vline(aes(xintercept = media), color = "blue", linetype = "dashed") +
facet_wrap(~p, scales = "free_y") +
labs(title = paste("Efecto del parámetro p (n =", n_fijo, ")"),
x = "Número de Éxitos",
y = "Probabilidad") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#| label: relacion-bernoulli-binomial
set.seed(789)
n_exp <- 8
p_exp <- 0.6
n_sim_rel <- 1000
# Método 1: Generar directamente de Binomial
binomial_directo <- rbinom(n_sim_rel, n_exp, p_exp)
# Método 2: Sumar n variables Bernoulli independientes
suma_bernoulli <- replicate(n_sim_rel, {
bernoulli_vars <- rbinom(n_exp, 1, p_exp)
sum(bernoulli_vars)
})
# Comparar distribuciones
comparacion_relacion <- data.frame(
Binomial_Directo = binomial_directo,
Suma_Bernoulli = suma_bernoulli
)
# Visualización comparativa
comp_rel_long <- comparacion_relacion %>%
mutate(id = row_number()) %>%
pivot_longer(cols = c(Binomial_Directo, Suma_Bernoulli),
names_to = "Metodo",
values_to = "Valor")
ggplot(comp_rel_long, aes(x = Valor, fill = Metodo)) +
geom_histogram(alpha = 0.6, position = "identity", bins = n_exp + 1) +
scale_fill_manual(values = c("Binomial_Directo" = "blue", "Suma_Bernoulli" = "red")) +
labs(title = "Equivalencia: Binomial vs Suma de Bernoulli",
subtitle = paste("n =", n_exp, ", p =", p_exp),
x = "Valor",
y = "Frecuencia",
fill = "Método") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "bottom")
#| label: setup
#| include: false
library(tidyverse)
library(kableExtra)
library(gridExtra)
#| label: moneda-geometrica
# Parámetro
p_cara <- 0.5
# Calcular probabilidades para los primeros 11 ensayos
k_moneda <- 0:10
prob_geometrica <- dgeom(k_moneda , p_cara)
# Crear tabla
geometrica_moneda <- data.frame(
Ensayo = k_moneda,
Probabilidad = prob_geometrica,
Prob_Acumulada = pgeom(k_moneda, p_cara)
)
kable(geometrica_moneda,
caption = "Distribución Geométrica - Primera cara (p = 0.5)",
digits = 4,
col.names = c("Ensayo", "P(X = x)", "P(X ≤ x)")) %>%
kable_styling(bootstrap_options = "striped")
# Parámetros estadísticos
media_moneda <- (1-p_cara) / p_cara
varianza_moneda <- (1 - p_cara) / (p_cara^2)
desv_std_moneda <- sqrt(varianza_moneda)
cat("Media (ensayos esperados):", media_moneda, "\n")
cat("Varianza:", varianza_moneda, "\n")
cat("Desviación estándar:", round(desv_std_moneda, 4), "\n")
#| label: grafico-geometrica-basico
#| fig-cap: "Distribución Geométrica - Primera cara en lanzamiento de moneda"
ggplot(geometrica_moneda, aes(x = Ensayo, y = Probabilidad)) +
geom_col(fill = "steelblue", alpha = 0.7, width = 0.8) +
geom_text(aes(label = round(Probabilidad, 3)), vjust = -0.5, size = 3) +
geom_vline(xintercept = media_moneda, color = "red", linetype = "dashed", linewidth = 1) +
annotate("text", x = media_moneda + 1.5, y = max(prob_geometrica) * 0.8,
label = paste("E[X] =", media_moneda), color = "red") +
scale_x_continuous(breaks = k_moneda) +
labs(title = paste("Distribución Geométrica(", p_cara, ")"),
subtitle = "Número de lanzamientos antes de obtener la primera cara",
x = "Número de Ensayos",
y = "Probabilidad") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#| label: diferentes-p
# Diferentes probabilidades de éxito
p_values <- c(0.1, 0.3, 0.5, 0.7, 0.9)
k_max <- 15
# Crear data frame para comparación
geometrica_comp <- data.frame()
for(p in p_values) {
k_vals <- 0:k_max
probs <- dgeom(k_vals, p)
temp_data <- data.frame(
p_label = paste("p =", p),
k = k_vals,
probabilidad = probs,
media = (1-p)/p,
varianza = (1-p)/(p^2)
)
geometrica_comp <- rbind(geometrica_comp, temp_data)
}
# Tabla de parámetros
parametros_comp <- data.frame(
p = p_values,
Media = (1-p_values)/p_values,
Varianza = (1-p_values)/(p_values^2),
Desv_Std = sqrt((1-p_values)/(p_values^2))
)
kable(parametros_comp,
caption = "Parámetros de la distribución geométrica para diferentes valores de p",
digits = 4,
col.names = c("p", "Media", "Varianza", "Desv. Std")) |>
kable_styling(bootstrap_options = "striped")
#| label: grafico-diferentes-p
#| fig-cap: "Distribución Geométrica para diferentes valores de p"
# Filtrar para mejor visualización
geometrica_filtered <- geometrica_comp[geometrica_comp$probabilidad > 0.005, ]
ggplot(geometrica_filtered, aes(x = k, y = probabilidad, color = p_label)) +
geom_line(size = 1, alpha = 0.8) +
geom_point(size = 2) +
facet_wrap(~p_label, scales = "free") +
labs(title = "Distribución Geométrica para diferentes valores de p",
x = "Número de Ensayos",
y = "Probabilidad",
color = "Parámetro") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none")
#| label: grafico-diferentes-p
#| fig-cap: "Distribución Geométrica para diferentes valores de p"
# Filtrar para mejor visualización
geometrica_filtered <- geometrica_comp[geometrica_comp$probabilidad > 0.005, ]
ggplot(geometrica_filtered, aes(x = k, y = probabilidad, color = p_label)) +
geom_line(size = 1, alpha = 0.8) +
geom_point(size = 2) +
facet_wrap(~p_label, scales = "free") +
labs(title = "Distribución Geométrica para diferentes valores de p",
x = "Número de Ensayos",
y = "Probabilidad",
color = "Parámetro") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none")
p<-0.7
k_vals<-0:7
jugador <- tibble(tiros<- k_vals,
probabilidad = dgeom(tiros, p))
p<=0.7
k_vals<=0:7
jugador <= tibble(tiros<= k_vals,
probabilidad = dgeom(tiros, p))
p<-0.7
k_vals<-0:7
jugador <- tibble(tiros= k_vals,
probabilidad = dgeom(tiros, p))
ggplot(jugador)+
geom_col(aes(tiros, probabilidad), fill = "#e8681d", alpha=0.2, color="black")
+ theme_bw()
p<-0.7
k_vals<-0:7
jugador <- tibble(tiros= k_vals,
probabilidad = dgeom(tiros, p))
ggplot(jugador)+
geom_col(aes(tiros, probabilidad), fill = "#e8681d", alpha=0.2, color="black")+ theme_bw()
esperanza<- (1-p)/p
cat("b) El número de intentos que se espera que se necesite para anotar: ", esperanza +1)
